"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

type Query {
    users: [User!]! @guard(with: ["api"]) @paginate(type: "paginator" model: "App\\Models\\User")
    user(id: ID @eq): User @find
    me: User! @auth
    advertisements (category_id: Int @where(key: "category_id")): [Advertisement!]! @paginate(type: "paginator" model: "App\\Models\\Advertisement") @orderBy(column: "created_at", direction: "DESC")
    advertisement(id: Int! @eq): Advertisement @find

    categories: [Category!]! @all

    comments: [Comment!]! @all
    comments(id: Int! @eq): Comment @find
}

type User {
    id: ID!
    name: String!
    email: String!
    avatar: String
    created_at: DateTime!
    updated_at: DateTime!
    advertisements: [Advertisement!]! @hasMany
    profile: Profile @hasOne
    provider: String!
}

type Profile{
    id: ID!
    type_of_education: String!
    user: User! @belongsTo
    universities: [UserUniversity] @hasMany
    schools: [UserSchool] @hasMany
}

type UserUniversity{
    id: ID!
    university_id: String
    name: String
    major: String!
    finished: Boolean!
}

type UserSchool{
    id: ID!
    name: String!
    major: String!
    finished: Boolean!
}
input UserSchoolInput{
    id: ID
    name: String!
    major: String!
    finished: Boolean!
}

type Category{
    id: ID!
    name: String!
    advertisements: [Advertisement!]! @hasMany
}

type Advertisement {
    id: ID!
    name: String!
    description: String!
    price: Float!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
    category: Category! @belongsTo
    comments: [Comment!]! @hasMany
    type: String!
}


type Comment {
    id: ID!
    description: String!
    created_at: DateTime!
    updated_at: DateTime!
    user: User! @belongsTo
    advertisement: Advertisement! @belongsTo
}

type Mutation {
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])

    #####################################

    createAdvertisement(name: String!, description: String! ,price: Int!,user_id: Int!,type: String!,  category_id:Int!): Advertisement! @create
    createComment(description: String!, user_id: Int!, advertisement_id:Int!): Comment! @create

    ChangeUserPrimaryInfo(name: String!, email: String!, avatar: Upload @rules(apply: ["image", "mimes:jpeg,png,jpg,gif,svg", "max:512", "nullable"])): User! @guard
    CreateOrChangeProfile(type_of_education: String!): Profile! @guard

    AddSchool(name: String!, major: String!, finished: Boolean!): UserSchool! @guard
    DeleteSchool(id: ID!): UserSchool @delete
    EditSchool(id: ID!, name: String!, major: String!, finished: Boolean!): UserSchool @update

    AddUniversity(university_id: String, name: String, major: String!, finished: Boolean!): UserUniversity! @guard
    DeleteUniversity(id: ID!): UserUniversity @delete
    EditUniversity(id: ID!, university_id: String, name: String, major: String!, finished: Boolean!): UserUniversity @update
}

